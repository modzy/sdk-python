# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from modzy.edge.proto.inferences.api.v1 import inferences_pb2 as protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2


class InferenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PerformInference = channel.unary_unary(
                '/inferences.api.v1.InferenceService/PerformInference',
                request_serializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceRequest.SerializeToString,
                response_deserializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.FromString,
                )
        self.GetInferenceDetails = channel.unary_unary(
                '/inferences.api.v1.InferenceService/GetInferenceDetails',
                request_serializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceIdentifier.SerializeToString,
                response_deserializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.FromString,
                )
        self.StreamInferences = channel.stream_stream(
                '/inferences.api.v1.InferenceService/StreamInferences',
                request_serializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceRequest.SerializeToString,
                response_deserializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.FromString,
                )


class InferenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PerformInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInferenceDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInferences(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PerformInference': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformInference,
                    request_deserializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceRequest.FromString,
                    response_serializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.SerializeToString,
            ),
            'GetInferenceDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInferenceDetails,
                    request_deserializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceIdentifier.FromString,
                    response_serializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.SerializeToString,
            ),
            'StreamInferences': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamInferences,
                    request_deserializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceRequest.FromString,
                    response_serializer=protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inferences.api.v1.InferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InferenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PerformInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inferences.api.v1.InferenceService/PerformInference',
            protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceRequest.SerializeToString,
            protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInferenceDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inferences.api.v1.InferenceService/GetInferenceDetails',
            protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceIdentifier.SerializeToString,
            protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamInferences(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/inferences.api.v1.InferenceService/StreamInferences',
            protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.InferenceRequest.SerializeToString,
            protos_dot_modzy_dot_inferences_dot_api_dot_v1_dot_inferences__pb2.Inference.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
